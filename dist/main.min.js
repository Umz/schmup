(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/seanodonohue/myProjects/schmup-prototype/src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'schmup-game');

var width = 800;
var height = 600;

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}



game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/boot.js","./states/game":"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/game.js","./states/menu":"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/menu.js","./states/preloader":"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/preloader.js","./states/splash":"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/splash.js","./utils":"/Users/seanodonohue/myProjects/schmup-prototype/src/js/utils.js"}],"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  800;
      this.game.scale.minHeight = 600;
      this.game.scale.maxWidth = 800;
      this.game.scale.maxHeight = 600;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/game.js":[function(require,module,exports){
'use strict';
var player;

var playerShields;
var gameOver;

var score = 0;
var scoreText;

var enemies;
var enemyOptions;
var droneScouts;
var droneFighters;
var droneBombers;
var enemyReleaseCounter = 0;

var starfield;
var scrollSpeed = 2;

var explosions;
var bullets;
var firingSpeed = 25; // higher = slower
var bulletCounter = firingSpeed;

var cursors;
var fireButton;

var ship = {
  acceleration: 600,
  drag: 350,
  maxSpeed: 400
};

var size = {
  xSmall: 0.4,
  small: 0.5,
  medium: 0.75,
  large: 1,
  xLarge: 1.25,
  miniBoss: 1.5,
  boss: 2
};

var shipTrail;

var Game = function() {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function() {
    var game = this;

    starfield = game.add.tileSprite(0, 0, 800, 600, 'starfield');

    initPlayerShip();
    initControls();
    initEnemies();
    initWeapons();
    initEffects();
    initMessages();

    function initPlayerShip() {
      player = game.add.sprite(400, 500, 'ship');
      game.physics.arcade.enable(player);
      player.events.onKilled.add(function() {
        shipTrail.kill();
      });
      player.body
        .maxVelocity.setTo(ship.maxSpeed, ship.maxSpeed);
      player.body
        .drag.setTo(ship.drag, ship.drag);
      player.anchor.setTo(0.5, 0.5);
      player.health = 100;
      player.size = size.large;
      game.createShipTrail(player, 'plasma');
    }

    function initControls() {
      cursors = game.input.keyboard.createCursorKeys();
      fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    }

    function initEnemies() {

      droneScouts = game.add.group();
      droneFighters = game.add.group();
      droneBombers = game.add.group();
      enemies = [
        droneScouts,
        droneFighters,
        droneBombers
      ];

      droneScouts.init = function() {
        console.log(this);
        this.createMultiple(50, 'droneScout');
        this.minWaveTiming = 140;
        this.maxWaveTiming = 380;
        this.minWaveNumber = 3;
        this.maxWaveNumber = 5;
        this.forEach(function(enemy) {
          enemy.damageAmount = 10;
          enemy.level = 2;
          enemy.speed = game.randomIntegerFrom(250, 450);
          enemy.drift = 30;
          enemy.drag = game.randomIntegerFrom(100, 200);
          enemy.minX = 50;
          enemy.maxX = 750;
          enemy.scale.x = size.xSmall;
          enemy.scale.y = size.xSmall;
        });
      };

      droneFighters.init = function() {
        this.createMultiple(10, 'droneFighter');
        this.minWaveTiming = 190;
        this.maxWaveTiming = 500;
        this.minWaveNumber = 2;
        this.maxWaveNumber = 4;
        this.forEach(function(enemy) {
          enemy.damageAmount = 25;
          enemy.level = 3;
          enemy.speed = game.randomIntegerFrom(250, 400);
          enemy.drift = game.randomIntegerFrom(200, 450);
          enemy.drag = 50;
          enemy.minX = 100;
          enemy.maxX = 700;
          enemy.scale.x = size.medium;
          enemy.scale.y = size.medium;
        });
      };

      droneBombers.init = function() {
        this.createMultiple(5, 'droneBomber');
        this.minWaveTiming = 500;
        this.maxWaveTiming = 600;
        this.minWaveNumber = 0;
        this.maxWaveNumber = 1;
        this.forEach(function(enemy) {
          enemy.damageAmount = 50;
          enemy.level = 4;
          enemy.speed = 100;
          enemy.drift = 5;
          enemy.drag = 5;
          enemy.minX = 250;
          enemy.maxX = 650;
          enemy.scale.x = size.large;
          enemy.scale.y = size.large;
        });
      };


      enemies.forEach(function(group) {
        configureEnemies(group);
        group.init();
      });

      game.launchEnemies(game.randomIntegerFrom(3, 5), droneScouts);
    }

    function configureEnemies(group) {
      group.physicsBodyType = Phaser.Physics.ARCADE;
      group.enableBody = true;
      group.setAll('anchor.x', 0.5);
      group.setAll('anchor.y', 0.5);
      group.setAll('angle', 180);
      group.setAll('outOfBoundsKill', true);
      group.setAll('checkWorldBounds', true);
    }

    function initWeapons() {
      bullets = game.add.group();
      bullets.enableBody = true;
      bullets.physicsBodyType = Phaser.Physics.ARCADE;
      bullets.createMultiple(15, 'bullet');
      bullets.setAll('anchor.x', 0.5);
      bullets.setAll('anchor.y', 1);
      bullets.setAll('outOfBoundsKill', true);
      bullets.setAll('checkWorldBounds', true);
    }

    function initEffects() {
      explosions = game.add.group();
      explosions.enableBody = true;
      explosions.physicsBodyType = Phaser.Physics.ARCADE;
      explosions.createMultiple(30, 'explosion');
      explosions.setAll('anchor.x', 0.5);
      explosions.setAll('anchor.y', 0.5);
      explosions.forEach(function(explosion) {
        explosion.animations.add('explosion');
      });
    }

    function initMessages() {

      createShieldMessage();
      createScoreMessage();
      createGameOverMessage();

      playerShields.render();
      scoreText.render();


      function createShieldMessage() {
        playerShields = game.add.bitmapText(game.world.width - 250, 10, 'spacefont', '' + player.health + '%', 20);
        playerShields.render = function() {
          playerShields.text = 'Shields: ' + Math.max(player.health, 0) + '%';
        };
      }


      function createScoreMessage() {
        scoreText = game.add.bitmapText(10, 10, 'spacefont', '', 20);
        scoreText.render = function() {
          scoreText.text = 'Score: ' + score;
        };
      }


      function createGameOverMessage() {
        gameOver = game.add.bitmapText(game.world.centerX, game.world.centerY, 'spacefont', 'GAME OVER!', 50);
        gameOver.x = gameOver.x - gameOver.textWidth / 2;
        gameOver.y = gameOver.y - gameOver.textHeight / 3;
        gameOver.visible = false;
      }
    }

  },

  update: function() {
    var game = this;

    starfield.tilePosition.y += scrollSpeed;
    enemyReleaseCounter++;

    enemies.forEach(function(enemy) {
      checkWaveTimer(enemy);
      launchNewWaves(enemy);

      function checkWaveTimer(enemy) {
        if (!enemy.waveTimer) {
          enemy.waveTimer =
            roundToNearestTen(
              game.randomIntegerFrom(
                enemy.minWaveTiming,
                enemy.maxWaveTiming
              ));
        }

        function roundToNearestTen(num) {
          return Math.ceil(num / 10) * 10;
        }
      }

      function launchNewWaves(enemy) {
        if (enemyReleaseCounter % enemy.waveTimer === 0) {
          game.launchEnemies(
            game.randomIntegerFrom(
              enemy.minWaveNumber,
              enemy.maxWaveNumber),
            enemy);
          console.log("Wave launched?!");
          enemy.waveTimer = null;
        }
      }
    });

    checkCollisions();
    checkForGameOver();
    calculatePlayerMovement();

    function calculatePlayerMovement() {

      player.body.acceleration.x = 0;
      game.checkForBounds(50, 750, player);
      checkForPlayerInput();
      shipTrail.x = player.x;
      game.applyBankingToShip(player);


      function checkForPlayerInput() {
        if (cursors.left.isDown) {
          player.body.acceleration.x = -ship.acceleration;
        } else if (cursors.right.isDown) {
          player.body.acceleration.x = ship.acceleration;
        }

        if (player.alive && fireButton.isDown) {
          fireBullet();
        }
      }
    }

    function checkForGameOver() {
      if (!player.alive && gameOver.visible == false) {
        gameOver.visible = true;
        gameOver.alpha = 0;
        var fadeInGameOver = game.add.tween(gameOver);
        fadeInGameOver.to({
          alpha: 1
        }, 1000, Phaser.Easing.Quintic.Out);
        fadeInGameOver.onComplete.add(setResetHandlers);
        fadeInGameOver.start();

        function setResetHandlers() {
          var tapRestart = game.input.onTap.addOnce(_restart, game);
          var spaceRestart = fireButton.onDown.addOnce(_restart, game);

          function _restart() {
            tapRestart.detach();
            spaceRestart.detach();
            game.restart();
          }
        }
      }
    }

    function checkCollisions() {
      enemies.forEach(function(group) {
        game.physics.arcade.overlap(player, group, shipCollide, null, game);
        game.physics.arcade.overlap(bullets, group, hitEnemy, null, game);
      });
    }

    function fireBullet() {
      var bullet = bullets.getFirstExists(false);
      var bulletSpeed = 400;

      if (bulletCounter > firingSpeed) {

        bulletCounter = 0;

        // Bullet physics
        if (bullet) {
          bullet.reset(player.x, player.y - 25);

          bullet.body.velocity.y = -200;
          bullet.body.velocity.x += player.body.velocity.x / 5;
        }
      }
      bulletCounter++;
    }

    function shipCollide(player, enemy) {
      var explosion = explosions.getFirstExists(false);
      explosion.reset(enemy.body.x + enemy.body.halfWidth, enemy.body.y + enemy.body.halfHeight);
      explosion.body.velocity.y = enemy.body.velocity.y;
      explosion.alpha = 0.7;
      explosion.play('explosion', 30, false, true);
      enemy.kill();

      player.damage(enemy.damageAmount);
      playerShields.render();
      addPointsForKilling(enemy);
    }

    function hitEnemy(bullet, enemy) {
      var explosion = explosions.getFirstExists(false);
      explosion.reset(enemy.body.x + enemy.body.halfWidth, enemy.body.y + enemy.body.halfHeight);
      explosion.body.velocity.y = enemy.body.velocity.y;
      explosion.alpha = 0.7;
      explosion.play('explosion', 30, false, true);
      enemy.kill();
      bullet.kill();
      addPointsForKilling(enemy);
    }

    function addPointsForKilling(enemy) {
      score += enemy.damageAmount * enemy.level;
      scoreText.render();
    }

  },

  launchEnemies: function(quantity, enemyGroup) {
    var game = this;
    for (var i = 0; i < quantity; i++) {
      launchEnemy();
    }

    function launchEnemy() {
      console.log("Launching enemy...");
      var enemy = enemyGroup.getFirstExists(false);
      if (enemy) {
        var enemyLocation = game.randomIntegerFrom(
          enemy.minX, enemy.maxX);
        enemy.reset(enemyLocation, -20);
        enemy.body.velocity.x = game.randomIntegerFrom(-enemy.drift, enemy.drift);
        enemy.body.velocity.y = enemy.speed;
        enemy.body.drag.x = enemy.drag;
      }
    }
  },

  // Unused as of right now.
  // Could be used for powerups or abilities that change enemy attributes
  // (speed could be halved for a "Slow Time" powerup, for example)
  setEnemyAttributes: function(enemy, options) {
    options = options || {};
    game.physics.enable(enemy, Phaser.Physics.ARCADE);
    for (attr in options) {
      enemy[attr] = options[attr];
    }
  },

  checkForBounds: function(min, max, entity) {
    if (entity.x > max) {
      entity.x = max;
      entity.body.acceleration.x = -50;
    }
    if (entity.x < min) {
      entity.x = min;
      entity.body.acceleration.x = 50;
    }
  },

  // TODO - Tack stuff like maxSpeed to player object
  applyBankingToShip: function(entity) {
    var bank = entity.body.velocity.x / ship.maxSpeed;
    entity.scale.x = entity.size - Math.abs(bank) / 4;
    entity.angle = bank * 5;
  },

  createShipTrail: function(ship, particleName) {
    shipTrail = this.add.emitter(ship.x, ship.y + 40, 400);
    shipTrail.width = 10;
    shipTrail.makeParticles(particleName);
    shipTrail.setXSpeed(30, -30);
    shipTrail.setYSpeed(200, 180);
    shipTrail.setRotation(50, -50);
    shipTrail.setAlpha(1, 0.01, 800);
    shipTrail.setScale(0.05, 0.4, 0.05, 0.4, 2000, Phaser.Easing.Quintic.Out);
    shipTrail.start(false, 5000, 10);
  },

  restart: function() {
    droneScouts.callAll('kill');
    enemyReleaseCounter = 0;
    player.revive();
    player.health = 100;
    playerShields.render();
    score = 0;
    scoreText.render();
    gameOver.visible = false;
  },

  // Utility functions
  randomIntegerFrom: function(min, max) {
    return Math.floor(Math.random() * (max - min) + min + 1);
  },

  onInputDown: function() {
    this.game.state.start('Menu');
  }
};
},{}],"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
  this.subtitle = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    this.text = this.add.bitmapText(x - 300, y - 200, 'spacefont', "Click to Start", 50);
    this.subtitle = this.add.bitmapText(x - 300, y - 100, 'spacefont', "Arrow keys to move, Space to fire", 20);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function(game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;


Preloader.prototype = {

  preload: function() {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.physics.startSystem(Phaser.Physics.ARCADE);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('starfield', 'assets/starfield.png');
    this.load.image('ship', 'assets/player.png');
    this.load.image('plasma', 'assets/bluePlasma.png');
    this.load.image('laser', 'assets/blueLaser.png');
    this.load.image('bullet', 'assets/blueBullet.png');
    this.load.image('droneScout', 'assets/droneScout.png');
    this.load.image('droneFighter', 'assets/droneFighter.png');
    this.load.image('droneBomber', 'assets/droneBomber.png');
    this.load.image('enemyTrail', 'assets/enemyTrail.png');
    this.load.spritesheet('explosion', 'assets/explosion.png', 128, 128);
    this.load.bitmapFont('spacefont', 'assets/spacefont/spacefont.png', 'assets/spacefont/spacefont.fnt');
  },

  create: function() {
    this.asset.cropEnabled = false;
  },

  update: function() {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function() {
    this.ready = true;
  }
};
},{}],"/Users/seanodonohue/myProjects/schmup-prototype/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"/Users/seanodonohue/myProjects/schmup-prototype/src/js/utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["/Users/seanodonohue/myProjects/schmup-prototype/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
